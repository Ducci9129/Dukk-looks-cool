{
  "title": "CSS Hovers",
  "content": "Welcome to the first lesson on how you can get started with making the web less [boring]. We’ll be starting with CSS Hover effects. If you already know about this, you can skip to the next lesson at the bottom. You should still stick around though, you might learn something!\n\n## Getting started with hover effects\n\nIt’s not that hard to add a hover effect to an element. Here, we have an arrow button. How can we get it to be more interactive?\n\n<iframe height='300' style='width: 100%;' scrolling='no' title='Arrow step 1' src='https://codepen.io/samalander0/embed/XWBaVEx?default-tab=css%2Cresult&editable=true&theme-id=dark' frameborder='no' loading='lazy' allowtransparency='true' allowfullscreen='true'>\n</iframe>\n\nTry adding some new CSS. To style the hover state, we’ll use the `:hover` selector. Let’s add some code:\n\n```css\nbutton:hover {\n  background: black;\n}\n```\n\nThis means that when the `button` element is hovered, the background will turn black.\n\n<iframe height='300' style='width: 100%;' scrolling='no' title='Arrow step 1' src='https://codepen.io/samalander0/embed/yLqopjK?default-tab=css%2Cresult&editable=true&theme-id=dark' frameborder='no' loading='lazy' allowtransparency='true' allowfullscreen='true'>\n</iframe>\n\nOh no! There’s a problem. When we hover over the button, you can’t see the arrow anymore. When you’re working on more advanced hover effects, you might often have this problem. We could add in another image that’s white, but that’s too much work. Instead, we’ll use a CSS filter.\n\nBecause CSS is cascading, we can make something happen to the image inside of the button when the parent button element is hovered. Let’s add the following code: \n\n```css\nbutton:hover img {\n  filter: invert(100%);\n}\n```\n\nThere we go! Now we have a simple hover effect for the arrow. When it’s hovered, the background will turn black, and the image inside will be inverted, turning white.\n\n<iframe height='300' style='width: 100%;' scrolling='no' title='Arrow step 2' src='https://codepen.io/samalander0/embed/LYBjerw?default-tab=css%2Cresult&editable=true&theme-id=dark' frameborder='no' loading='lazy' allowtransparency='true' allowfullscreen='true'>\n</iframe>\n\n## Making your hover effects more interesting\n\nWhat happens if we want to make our hover effect less [boring]? We can use the `transition` CSS property.\n\n```css\nbutton, img {\n  transition: 0.5s;\n}\n```\n\n`transition` lets us control how long the animation takes. With this current setup, when you hover over the button, the effect will take half a second to fully happen.\n\n<iframe height='300' style='width: 100%;' scrolling='no' title='Arrow step 4' src='https://codepen.io/samalander0/embed/yLqopqj?default-tab=css%2Cresult&editable=true&theme-id=dark' frameborder='no' loading='lazy' allowtransparency='true' allowfullscreen='true'>\n</iframe>\n\nAnother cool thing you can do with the `transition` property is specify an easing function. An easing function tells the browser how to play the animation. Take a look at some easings that you could use at [this link](https://easings.net/). Let’s add the `ease-in-out` easing to our element:\n\n<iframe height='300' style='width: 100%;' scrolling='no' title='Arrow step 4' src='https://codepen.io/samalander0/embed/qByXpyz?default-tab=css%2Cresult&editable=true&theme-id=dark' frameborder='no' loading='lazy' allowtransparency='true' allowfullscreen='true'>\n</iframe>\n\nSee how the effect feels much smoother now? \n\n## Taking your hover effects to the next level\n\nWant to make your hover effects even more interesting? Pseudo elements are a great way to do that. You can scale, rotate, and move them around any way you want. Check out this hover effect I’ve created:\n\n<iframe height='300' style='width: 100%;' scrolling='no' title='Arrow step 5' src='https://codepen.io/samalander0/embed/Expvoer?default-tab=css%2Cresult&editable=true&theme-id=dark' frameborder='no' loading='lazy' allowtransparency='true' allowfullscreen='true'>\n</iframe>\n\nCool, right? Let me break it down piece by piece. Let’s start with our pseudo element, the `::after` element. Pseudo elements are complicated, so I’m not going to fully go into them, but just think of them as another element that goes after or before your element. Let’s break down each of the lines in the styling:\n\n```css\nbutton::after {\n  content: ''; \n```\n\nTo start, you can make a pseudo element appear by referencing it using `::after` . Now, you may be asking why the `content` property is there. It’s because otherwise, the element won’t display.\n\n```css\nwidth: 100%;\nheight: 100%;\nposition: absolute;\ntop: 0;\nleft: 0;\nborder-radius: 100%;\n```\n\nThese lines are all stuff to get it to show up, and be the same size as the parent `button` element. We set the width and the height to be the same as the button, and we set it’s `position` to `absolute`. This means that it won’t take up any space. We also tell it to align with the top and left of the button element. `border-radius: 100%` turns it into a circle, like the parent.\n\nNext, let’s get on to the juicy bit:\n\n```css\nbackdrop-filter: invert(100%);\ntransform: scale(0);\n\ntransition: 0.25s ease-in-out;\n```\n\nWe’re using the `invert()` filter here again, but instead of it being applied to the element, it’s being applied to the backdrop. This means that anything that is underneath the element will get inverted. Now, the only problem is that we want it to only show up when it’s hovered, and have a cool scale effect. We use `transform: scale(0)` to set the scale to 0 normally, then scale it up when it’s hovered using `transform: scale(1)`\n\nLet’s take a look at what I’m doing to the image:\n\n```css\nbutton:hover img {\n  transform: scale(0.85) rotate(-20deg);\n}\n```\n\nWhen the button is hovered, I apply some more transforms to the `img` element. Firstly, we scale it down a bit, then rotate it -20 degrees. \n\nTada! We’ve created a super-cool arrow button!\n\n![/media/arrow.gif](/media/arrow.gif)",
  "next": "css-animations"
}